pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- initialize game state
function _init()
    -- load map and set initial player position
    load_map()
    player = {x = 8, y = 8, dx = 0, dy = 0, score = 0, on_ground = false}
    gravity = 0.2
    jump_strength = -2.5
    move_speed = 1
    bullet_speed = 2
    bullets = {}
    treasures = {{x = 40, y = 40}, {x = 80, y = 24}}
    enemies = {{x = 64, y = 64, dir = 1}}
    exit = {x = 120, y = 120}
    
end

-- update game state
function _update()
    -- apply gravity
    player.dy += gravity
    player.on_ground = false
    
    -- player movement
    if btn(0) then player.dx = -move_speed end -- left
    if btn(1) then player.dx = move_speed end -- right
    if not btn(0) and not btn(1) then player.dx = 0 end -- no horizontal movement

    -- horizontal collision detection
    player.x += player.dx
    if is_wall(player.x, player.y) or is_wall(player.x + 7, player.y) or is_wall(player.x, player.y + 7) or is_wall(player.x + 7, player.y + 7) then
        player.x -= player.dx
    end

    -- vertical collision detection
    player.y += player.dy
    if is_wall(player.x, player.y + 7) or is_wall(player.x + 7, player.y + 7) then
        player.y -= player.dy
        player.dy = 0
        player.on_ground = true
    end

    -- jumping
    if player.on_ground and btnp(5) then -- button 5 is usually the space bar
        player.dy = jump_strength
        player.on_ground = false
    end
    
    -- shooting bullets
    if btnp(4) then -- button 4 is usually the z key
        spawn_bullet(player.x + 4, player.y + 4, 1) -- adjust position as needed
    end
    
    -- update bullets
    for bullet in all(bullets) do
        bullet.x += bullet.dx
        bullet.y += bullet.dy
        
        -- check for collision with enemies
        for enemy in all(enemies) do
            if abs(bullet.x - enemy.x) < 8 and abs(bullet.y - enemy.y) < 8 then
                -- mark bullet for removal
                bullet.remove = true
                player.score += 50
                break
            end
        end
    end

    -- remove bullets marked for removal
    for i = #bullets, 1, -1 do
        if bullets[i].remove then
            del(bullets, bullets[i])
        end
    end
    
    -- update enemies
    for enemy in all(enemies) do
        -- update enemy position based on pattern (example: back-and-forth)
        enemy.x += enemy.dir
        if enemy.x < 8 or enemy.x > 120 then enemy.dir = -enemy.dir end
        -- check collision with player
        if abs(player.x - enemy.x) < 8 and abs(player.y - enemy.y) < 8 then
            -- handle game over or player damage
            _init() -- restart game for simplicity
        end
    end
    
    -- check if all treasures collected and player reached exit
    if #treasures == 0 and abs(player.x - exit.x) < 8 and abs(player.y - exit.y) < 8 then
        -- level complete (for simplicity, just restart)
        _init()
    end
end



-- draw game state
function _draw()
    cls()

    -- draw map, player, enemies, etc.
    -- draw map
    draw_map()
    -- draw player
    spr(1, player.x, player.y)
    -- draw treasures
    for t in all(treasures) do
        spr(2, t.x, t.y)
    end
    -- draw enemies
    for e in all(enemies) do
        spr(3, e.x, e.y)
    end
    
    -- draw bullets
    for bullet in all(bullets) do
        -- draw the bullet sprite at the bullet's position
        local sprite_attack = 6 + rnd(4) 
        spr(sprite_attack, bullet.x, bullet.y)
    end
end

-- helper function to load the map
function load_map()
    -- draw the map on the screen
    -- assuming the map size is 16x16 tiles
    map(0, 0, 0, 0, 16, 16)
end

-- helper function to check for wall collision
function is_wall(x, y)
    -- check if the tile at (x, y) is a wall
    -- assume walls have sprite index 16 (or whatever index you use for walls)
    local tile_x = flr(x / 8)
    local tile_y = flr(y / 8)
    local tile = mget(tile_x, tile_y)
    return tile == 16
end

-- helper function to spawn bullets
function spawn_bullet(x, y, direction)
    local bullet = {
        x = x,
        y = y,
        dx = bullet_speed * direction, -- bullet speed in the specified direction
        dy = 0, -- bullets typically don't move vertically
        remove = false -- initialize the remove flag
    }
    add(bullets, bullet)
end

function draw_map()
    -- draw the map on the screen
    -- assuming the map size is 16x16 tiles
    map(0, 0, 0, 0, 16, 16)
end
__gfx__
00000000300303030000000000000000000f00007777777700000000000000000033300000000000000000000000000000000000000000000000000000000000
00000000333333330066000000600000ffffffff7677777700000000003330003330333000000000000000000000000000000000000000000000000000000000
00700700003ff3000066066000600660f00000ff7777677700000338093033003300003300000338000000000000000000000000000000000000000000000000
00077000333ff3330066060000666600f000000f77777777933033b3a90003303000033b930003b3000000000000000000000000000000000000000000000000
00077000330bb0300066660000066000ffffffff77777677a033333300000330300003b8a3300333000000000000000000000000000000000000000000000000
00700700000bb000000666000066660000ff00007777777700333000000000333399000000333330000000000000000000000000000000000000000000000000
00000000000bb0000000000006600660000ff00077677777000000000000033b000a000000000000000000000000000000000000000000000000000000000000
0000000000ffff000000000006000066ffffffff7777777700000000000003b80000000000000000000000000000000000000000000000000000000000000000
ffff4fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f77f777f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4ff6fff6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f77777ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ff4fff4f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6f77777f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff4f6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f646fff4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f4777ffffffffffffffff7774f4ffff4f4777000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f4777f66666666666666f7774f4ffff4f4777000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f477764444444444444467774f4ffff4f4777000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f47774a74f4ffff4f47a4aa74f4ffff4f47aa000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f4777a774f4ffff4f477aaffffffffffffffa000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f47777774f4ffff4f4777a44444444444444a000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f47777774f4ffff4f47776666666666666666000000000000000000000000000000000000000000000000000000000000000000000000
000000007774f4ffff4f47777774f4ffff4f4777ffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1005050505050505050505050505051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1005050505050505050505050505051010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1005050505050505050505050505051010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1005050505050505050505050505051010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1005050505050505050505050505051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500
1010101010101010050505050505051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500
1005050505050505050505050505051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500
1005050505050505050505050505051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500
1005050505050505050505050505051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500
1005050505050505050505050505051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500
1005050505050505050510101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500
1005050505050505050505434405051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1005050505050505050505414205051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1005050505050505050505454605051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
